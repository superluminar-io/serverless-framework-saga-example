service: serverless-framework-saga-example
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-central-1

plugins:
  - serverless-step-functions

functions:
  processPayment:
    handler: src/processPayment.handler

  handleSuccessEvent:
   handler: src/handleSuccessEvent.handler
   events:
     - eventBridge:
        pattern:
          source:
            - superluminar.store.order
          detail-type:
            - Processed

  handleFailureEvent:
   handler: src/handleFailureEvent.handler
   events:
     - eventBridge:
        pattern:
          source:
            - superluminar.store.order
          detail-type:
            - Cancelled

stepFunctions:
  stateMachines:
    processOrder:
      events:
        - http:
            path: order
            method: POST
      definition:
        StartAt: IsValidRequest?
        States:
          IsValidRequest?:
            Type: Choice
            Choices:
              - And:
                  - Variable: "$.quantity"
                    NumericGreaterThanEquals: 1
                  - Variable: "$.quantity"
                    NumericLessThan: 10
                Next: CreateOrder
            Default: DoNothing

          DoNothing:
            Type: Pass
            End: true

          CreateOrder:
            Type: Task
            Resource: arn:aws:states:::dynamodb:putItem
            Parameters:
              TableName: !Ref OrderTable
              Item:
                orderId: 
                  S.$: "$$.Execution.Name"
                createdAt:
                  S.$: "$$.Execution.StartTime"
                firstname: 
                  S.$: "$.firstname"
                surname: 
                  S.$: "$.surname"
                street:
                  S.$: "$.street"
                zip:
                  S.$: "$.zip"
                city:
                  S.$: "$.city"
                itemId:
                  S.$: "$.itemId"
                quantity:
                  N.$: States.Format('{}', $.quantity)
                status:
                  S: "ORDER_RECEIVED"
            ResultPath: "$.createOrderResult"
            Next: ReserveItem

          ReserveItem:
            Type: Task
            Resource: arn:aws:states:::dynamodb:updateItem
            Parameters:
              TableName: !Ref StockTable
              Key:
                itemId:
                  S.$: "$.itemId"
              UpdateExpression: "SET #quantity = #quantity - :decrease"
              ConditionExpression: "#quantity >= :decrease"
              ExpressionAttributeNames:
                "#quantity": quantity
              ExpressionAttributeValues:
                ":decrease":
                  N.$: States.Format('{}', $.quantity)
            ResultPath: "$.reserveItemResult"
            Next: ProcessPayment
            Catch:
              - ErrorEquals: [ States.ALL ]
                Next: CancelOrder
                ResultPath: "$.reserveItemResult"

          CancelOrder:
            Type: Task
            Resource: arn:aws:states:::dynamodb:updateItem
            Parameters:
              TableName: !Ref OrderTable
              Key:
                orderId:
                  S.$: "$$.Execution.Name"
                createdAt:
                  S.$: "$$.Execution.StartTime"
              UpdateExpression: "SET #status = :status"
              ExpressionAttributeNames:
                "#status": status
              ExpressionAttributeValues:
                ":status":
                  S: "ORDER_CANCELLED"
            ResultPath: "$.cancelOrderResult"
            Next: EmitFailureEvent

          ProcessPayment:
            Type: Task
            Resource:
              Fn::GetAtt: [processPayment, Arn]
            ResultPath: "$.processPaymentResult"
            Next: ConfirmOrder
            Catch:
              - ErrorEquals: [ States.ALL ]
                Next: CancelReservation
                ResultPath: "$.processPaymentResult"
          
          ConfirmOrder:
            Type: Task
            Resource: arn:aws:states:::dynamodb:updateItem
            Parameters:
              TableName: !Ref OrderTable
              Key:
                orderId:
                  S.$: "$$.Execution.Name"
                createdAt:
                  S.$: "$$.Execution.StartTime"
              UpdateExpression: "SET #status = :status"
              ExpressionAttributeNames:
                "#status": status
              ExpressionAttributeValues:
                ":status":
                  S: "ORDER_PROCESSED"
            ResultPath: "$.confirmOrderResult"
            Next: EmitSuccessEvent
            Catch:
              - ErrorEquals: [ States.ALL ]
                Next: RefundPayment
                ResultPath: "$.confirmOrderResult"
          
          CancelReservation:
            Type: Task
            Resource: arn:aws:states:::dynamodb:updateItem
            Parameters:
              TableName: !Ref StockTable
              Key:
                itemId:
                  S.$: "$.itemId"
              UpdateExpression: "SET #quantity = #quantity + :increase"
              ExpressionAttributeNames:
                "#quantity": quantity
              ExpressionAttributeValues:
                ":increase":
                  N.$: States.Format('{}', $.quantity)
            ResultPath: "$.cancelReservationResult"
            Next: CancelOrder

          # To keep the example simple, we just simulate refunding here
          RefundPayment:
            Type: Pass
            ResultPath: "$.refundPaymentResult"
            Next: CancelReservation

          EmitSuccessEvent:
            Type: Task
            Resource: arn:aws:states:::events:putEvents
            Parameters:
              Entries:
                - Source: superluminar.store.order
                  DetailType: 'Processed'
                  Detail:
                    OrderId.$: "$$.Execution.Name"
                    CreatedAt.$: "$$.Execution.StartTime"
            End: true

          EmitFailureEvent:
            Type: Task
            Resource: arn:aws:states:::events:putEvents
            Parameters:
              Entries:
                - Source: superluminar.store.order
                  DetailType: 'Cancelled'
                  Detail:
                    OrderId.$: "$$.Execution.Name"
                    CreatedAt.$: "$$.Execution.StartTime"
            End: true

      dependsOn: 
        - OrderTable
        - StockTable

resources:
  Resources:
    OrderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    
    StockTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
  
  Outputs:
    StockTableName:
      Value: !Ref StockTable